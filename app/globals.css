@import "tailwindcss";
@import "tw-animate-css";

@keyframes gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.animate-gradient {
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
}

/* CHỮ MEMORA LẤY HIỆU ỨNG SÁNG LÊN */
@keyframes shine {
  0% {
    background-position: -200% center;
  }
  100% {
    background-position: 200% center;
  }
}

.text-bling {
  background: linear-gradient(
    120deg,
    #ffffff 30%,
    #bbe3fc 40%,
    #d4bfff 50%,
    #ffb6ec 70%,
    #ffffff 90%
  );
  background-size: 200% auto;
  color: transparent;
  background-clip: text;
  -webkit-background-clip: text;
  animation: shine 5s linear infinite;
}

/* ===== Char drop animation ===== */
@keyframes charDrop {
  0% {
    opacity: 0;
    transform: translateY(-60px);
    filter: blur(8px);
  }
  60% {
    opacity: 1;
    transform: translateY(0);
    filter: blur(0);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
    filter: blur(0);
  }
}
.char-drop {
  display: inline-block;
  opacity: 0;
  animation: charDrop var(--dur, 1.4s) cubic-bezier(0, 0, 0.2, 1) both;
  animation-delay: var(--delay, 0s);
  will-change: transform, opacity, filter;
}
@media (prefers-reduced-motion: reduce) {
  .char-drop {
    animation: none !important;
    opacity: 1 !important;
    transform: none !important;
    filter: none !important;
  }
}

/* ===== White Diamond (rõ trên nền sáng) ===== */
@keyframes diamondTwinkle {
  0% {
    opacity: 0;
    transform: translateY(0);
    filter: blur(4px);
  }
  40% {
    opacity: 1;
    transform: translateY(-6px);
    filter: blur(0);
  }
  70% {
    opacity: 0.75;
    transform: translateY(-3px);
    filter: blur(0.6px);
  }
  100% {
    opacity: 0;
    transform: translateY(0);
    filter: blur(4px);
  }
}
@keyframes diamondFloat {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-8px);
  }
  100% {
    transform: translateY(0);
  }
}

/* vẽ hình thoi + màu trắng bằng biến CSS để dễ chỉnh */
.diamond {
  position: absolute;
  width: var(--size, 14px);
  height: var(--size, 14px);
  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%); /* hình thoi */
  background: var(--fill, #ffffff); /* <<< trắng */
  border: 1px solid var(--border, rgba(0, 0, 0, 0.2)); /* viền hơi xám để nổi trên nền sáng */
  box-shadow: 0 0 12px var(--glow1, rgba(255, 255, 255, 0.85)),
    0 0 24px var(--glow2, rgba(255, 255, 255, 0.55)); /* glow trắng */
  opacity: 0;
  pointer-events: none;
  animation: diamondTwinkle var(--dur, 2.6s) ease-in-out var(--delay, 0s)
      infinite,
    diamondFloat var(--floatDur, 7s) ease-in-out var(--delay, 0s) infinite;
  will-change: transform, opacity, filter;
}

.diamond.sm {
  --size: 10px;
  --dur: 2.2s;
  --floatDur: 5.5s;
}
.diamond.md {
  --size: 14px;
  --dur: 2.8s;
  --floatDur: 7s;
}
.diamond.lg {
  --size: 18px;
  --dur: 3.4s;
  --floatDur: 8.5s;
}

/* nếu nền tối thì dùng viền sáng hơn */
.diamond.on-dark {
  --border: rgba(255, 255, 255, 0.6);
}

@media (prefers-reduced-motion: reduce) {
  .diamond {
    animation: none !important;
    opacity: 0.9 !important;
    filter: none !important;
  }
}

/* ===== Star spin + pulse ===== */
@keyframes starSpinPulse {
  0% {
    transform: rotate(0deg) scale(var(--s0, 0.88));
  }
  50% {
    transform: rotate(180deg) scale(var(--s1, 1.12));
  }
  100% {
    transform: rotate(360deg) scale(var(--s0, 0.88));
  }
}

.star-spin {
  animation: starSpinPulse var(--dur, 10s) ease-in-out var(--delay, 0s) infinite;
  transform-origin: 50% 50%;
  will-change: transform, filter;
}

.star-glow {
  filter: drop-shadow(0 0 6px rgba(255, 255, 255, 0.85))
    drop-shadow(0 0 14px rgba(255, 255, 255, 0.35));
}

/* === Corner Glow Frame =================================== */
.cg-frame {
  position: relative;
}

/* 4 góc phát sáng */
.cg-frame .corner-glow {
  position: absolute;
  width: var(--cg-size, 220px);
  height: var(--cg-size, 220px);
  border-radius: 9999px;
  filter: blur(var(--cg-blur, 56px));
  opacity: var(--cg-opacity, 0.75);
  pointer-events: none;
  mix-blend-mode: screen;
  background: conic-gradient(
    from 0deg,
    var(--cg-stops, #f0abfc, #93c5fd, #a7f3d0, #fde68a, #fbcfe8, #f0abfc)
  );
  animation: cg-rotate var(--cg-speed, 8s) linear infinite;
  z-index: 0;
}
.cg-frame .corner-glow.tl {
  top: var(--cg-offset, -40px);
  left: var(--cg-offset, -40px);
}
.cg-frame .corner-glow.tr {
  top: var(--cg-offset, -40px);
  right: var(--cg-offset, -40px);
}
.cg-frame .corner-glow.bl {
  bottom: var(--cg-offset, -40px);
  left: var(--cg-offset, -40px);
}
.cg-frame .corner-glow.br {
  bottom: var(--cg-offset, -40px);
  right: var(--cg-offset, -40px);
}

@keyframes cg-rotate {
  to {
    transform: rotate(360deg);
  }
}

/* responsive nhẹ cho mobile */
@media (max-width: 640px) {
  .cg-frame .corner-glow {
    width: calc(var(--cg-size, 220px) * 0.72);
    height: calc(var(--cg-size, 220px) * 0.72);
    filter: blur(calc(var(--cg-blur, 56px) * 0.8));
  }
}

.container {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  flex-wrap: wrap;
  justify-content: center;
}

.container--mobile {
  min-width: 32rem;
}

.glass-container {
  position: relative;
  background: transparent;
  border-radius: 2rem;
  overflow: hidden;
  flex: 1 1 auto;
  box-shadow: 0 6px 6px rgba(0, 0, 0, 0.2), 0 0 20px rgba(0, 0, 0, 0.1);
  color: var(--lg-text);
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 2.2);
}

.glass-container--rounded {
  border-radius: 3rem;
}

.glass-container--large {
  flex: 1 1 auto;
}

.glass-container--medium {
  flex: 1 1 auto;
}

.glass-container--small {
  flex: 0 1 auto;
}

.glass-filter,
.glass-overlay,
.glass-specular {
  position: absolute;
  inset: 0;
  border-radius: inherit;
}

.glass-filter {
  z-index: 0;
  backdrop-filter: blur(4px);
  filter: url(#lensFilter) saturate(120%) brightness(1.15);
}

.glass-overlay {
  z-index: 1;
  background: var(--lg-bg-color);
}

.glass-specular {
  z-index: 2;
  box-shadow: inset 1px 1px 0 var(--lg-highlight),
    inset 0 0 5px var(--lg-highlight);
}

.glass-content {
  position: relative;
  z-index: 3;
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: space-around;
  padding: 12px 28px;
  gap: 1rem;
  flex-wrap: wrap;
}
